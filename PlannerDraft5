#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import pytz
from tzlocal import get_localzone

import astroplan
from astroplan import FixedTarget
from astroplan import Observer

import astropy
from astropy.time import Time
from astropy.coordinates import EarthLocation
from astropy.coordinates import SkyCoord
from astropy import coordinates
import astropy.units as u
from astropy.io import ascii
from astropy.table import Table, Column

from timezonefinder import TimezoneFinder
tf = TimezoneFinder()

# from astroplan import download_IERS_A
# download_IERS_A()



fmt = '%Y-%m-%d %H:%M:%S' #.%f' %Z%z'

current_time = dt.datetime.now()
local_timezone = get_localzone()

print('Current time is' , current_time.astimezone(local_timezone))
# print("Local Sidereal Time =",
#       Observer.local_sidereal_time(time = current_time,
#                                    self = local_timezone))
# need to figure out how to make sidereal time work

UTC = pytz.timezone('UTC')
UTC_time = current_time.astimezone(UTC)
print('UTC time is' , UTC_time.strftime(fmt))


################################################################################
# ARGUMENTS ####################################################################

import argparse
parser = argparse.ArgumentParser()

###################################################
parser.add_argument("-s" ,
                    "--start",
                    help = "Observation start time (local time, not UTC) as "+
                    "hh:mm (in 24hr time). Defaults to the time and date on "+
                    "which this program is being run. Can also be given as "+
                    "yyyy-mm-dd hh:mm:ss using the first argument for the "+
                    "desired date and the second for the desired time.",
                    default = current_time.astimezone(local_timezone),
                    nargs = "+")

######################################################

parser.add_argument("-e",
                    "--end",
                    help = "Observation end time (local time, not UTC) as "+
                    "hh:mm (in 24hr time). Defaults to the time and date on "+
                    "which this program is being run. Can also be given as "+
                    "yyyy-mm-dd hh:mm:ss using the first argument for the "+
                    "desired date and the second for the desired time.",
                    default = current_time.astimezone(local_timezone),
                    nargs = "+")

######################################################

parser.add_argument("-p",
                    "--precision",
                    help = "The number of steps between the start and end "+
                    "time. The higher the number the more calculations will "+
                    "be done. Defaults to 1. Higher number yields more "+
                    "precision if using this script to tracking a target's "+
                    "elevation over a night, for example. ",
                    default = 1,
                    type = int)

######################################################

parser.add_argument("-l",
                    "--location",
                    help = "Takes the name of the observatory being used "+
                    "and finds the coordinates from a list of observatories. "+
                    " Use -o for list of observatories. ",
                    type = str)

######################################################

parser.add_argument("-c",
                    "--coordinates",
                    help = "Takes observer coordinates as longitude (deg), "+
                    "latitude (deg), elevation (m). Defaults to the Veritas "+
                    "site if no argument given. ",
                    type = float,
                    nargs = 3)
                    #default = [-110.95019 , 31.675 , 1268])

######################################################

parser.add_argument("-o",
                    "--observatories",
                    action = 'store_true',
                    help = "Type -o for list of recorded observatories.")

######################################################

parser.add_argument("-t",
                    "--target",
                    help = "Takes either a single target or a list of "+
                    "targets. A list of targets must be given as the location "+
                    "of a .txt file. The .txt file must contain either target "+
                    "names only or target name with RA and Dec in degrees. "+
                    "Can calculate RA and Dec automatically "+
                    "from target name but also accepts manual input of RA "+
                    "and Dec. For a single target, its information can be "+
                    "given using 1-3 arguments. Given 1 argument: Takes "+
                    "given argument as the name of the target object "+
                    "and finds its Right Ascension and Declination. "+
                    "Given 2 arguments: Takes the first given argument as "+
                    "the Right Ascension (deg) and the second as the "+
                    "Declination (deg) of the target object. "+
                    "Given 3 arguments: Takes first argument as the target "+
                    "name, the second argument as the target Right Ascension "+
                    "(deg) and the third argument as the target "+
                    "Declination (deg). ",
                    nargs = "+")

################################################################################


args = parser.parse_args()

################################################################################
###### FUNCTIONS ###############################################################


# Location

##### Always returns variable "observer" #####


if args.observatories == True:
    print(astropy.coordinates.EarthLocation.get_site_names())
elif args.location != None: # uses site name to find coordinates
                            # and time zone of named observatory
    observer = EarthLocation.of_site(args.location)
    # use .geodetic to extract latitude and longitude
    observatory_timezone = tf.closest_timezone_at(
                                        lng=float(observer.geodetic[0]/u.deg),
                                        lat=float(observer.geodetic[1]/u.deg))
    observer = Observer.at_site(args.location,
                                timezone = observatory_timezone)
    observatory_timezone = pytz.timezone(observatory_timezone)
elif args.coordinates != None:
    observer = Observer(location = EarthLocation.from_geodetic(
    args.coordinates[0]*u.deg,
    args.coordinates[1]*u.deg,
    args.coordinates[2]*u.m),
    name = "Observer Location",
    timezone = tf.closest_timezone_at(lng = args.coordinates[0],
                              lat = args.coordinates[1]))
    observatory_timezone = tf.closest_timezone_at(lng = args.coordinates[0],
                                                  lat = args.coordinates[1])
    observatory_timezone = pytz.timezone(observatory_timezone)
else:   ##### Defining Veritas as the default location #####
    observer = Observer(location = EarthLocation.from_geodetic(
    -110.95019*u.deg,
    31.675*u.deg,
    1268*u.m),
    name = "Veritas",
    timezone = "America/Phoenix")

    observatory_timezone = tf.closest_timezone_at(lng = -110.95019,
                                                  lat = 31.675)
    observatory_timezone = pytz.timezone(observatory_timezone)

print(observer)

################################################################################
##### Time #####################################################################

##### Always returns variables "Observation_Start" and "Observation_End" #####

if np.size(args.start) == 2:    # if full time and date information is given
    try:
        start = ' '.join(str(i) for i in args.start)
        Observation_Start = dt.datetime.strptime(start , '%Y-%m-%d %H:%M:%S')
    except:
         print("Invalid time format")
else: # np.size(args.start) == 1:  # if only time information is given
    try:    # creates a time object with today's date and the given time
        fmt1 = '%Y-%m-%d' #%H:%M:%S %Z%z'
        start = (local_timezone.localize(current_time).strftime(fmt1),
                 args.start[0])
        start = ' '.join(str(i) for i in start)
        print("y=",start)
        Observation_Start = dt.datetime.strptime(start , '%Y-%m-%d %H:%M')
        # could be improved using the
        # command .datetime_to_astropy_time()
    except:
        Observation_Start = args.start

#.strftime(fmt)

if np.size(args.end) == 2:    # if full time and date information is given
    try:
        end = ' '.join(str(i) for i in args.end)
        Observation_End = dt.datetime.strptime(end , '%Y-%m-%d %H:%M:%S')
    except:
        print("Invalid time format")
else: # np.size(args.start) == 1:  # if only time information is given
    try:
        fmt1 = '%Y-%m-%d' #%H:%M:%S %Z%z'
        end = (local_timezone.localize(current_time).strftime(fmt1),
                 args.end[0])
        end = ' '.join(str(i) for i in end)
        Observation_End = dt.datetime.strptime(end , '%Y-%m-%d %H:%M')
    except:
        Observation_End = args.end


################################################################################

fmt2 = '%Y-%m-%d %H:%M:%S.%f' # %Z%z'
fmt3 = '%Y-%m-%d %H:%M' #:%S.%f' # %Z%z'

print("Observatory timezone =" , observatory_timezone)

events = [('Observation Start',
            Observation_Start.strftime(fmt3),
            Observation_Start.astimezone(observatory_timezone).strftime(fmt3),
            Observation_Start.astimezone(UTC).strftime(fmt3)),
          ('Observation End',
            Observation_End.strftime(fmt3),
            Observation_End.astimezone(observatory_timezone).strftime(fmt3),
            Observation_End.astimezone(UTC).strftime(fmt3))]
t = Table(rows = events, names=('Event' , 'Local Time',
                                'Observatory Time' , 'UTC Time'))
print(t)

# try:
#     print(target)
# except:
#     try:
#         print(targets[0])
#     except:
#         print("No valid target given")


################################################################################

################################################################################
##### Observation Planning #####################################################


# For some reason (at the time of writing this script) the functions
# for calculating rise and set times always output in UTC Time.
# Because of this the functions strptime() and strftime() need
# to be used a lot to change the time output for rise and set times
# into a format which is operable on by the astimezone() function.


################################################################################
### Sunrise and Sunset #########################################################

sunrise_UTC = observer.sun_rise_time(Time(Observation_Start.astimezone(UTC)),
                                 which='next')

sunrise_at_observatory = (
    dt.datetime.strptime(sunrise_UTC.iso , fmt2))

sunrise_at_observatory = (
    sunrise_at_observatory.astimezone(observatory_timezone).strftime(fmt3))

##########

sunset_UTC = observer.sun_set_time(Time(Observation_End.astimezone(UTC)),
                               which='next')

sunset_at_observatory = (
    dt.datetime.strptime(sunset_UTC.iso , fmt2))

sunset_at_observatory = (
    sunset_at_observatory.astimezone(observatory_timezone).strftime(fmt3))

################################################################################
### Moonrise, moonset and moon phase ###########################################

moonrise_UTC = observer.moon_rise_time(Time(Observation_Start.astimezone(UTC)),
                                 which='next')
moonrise_at_observatory = (
    dt.datetime.strptime(moonrise_UTC.iso , fmt2))

moonrise_at_observatory = (
    moonrise_at_observatory.astimezone(observatory_timezone).strftime(fmt3))

##########

moonset_UTC = observer.moon_set_time(Time(Observation_End.astimezone(UTC)),
                               which='next')
moonset_at_observatory = (
    dt.datetime.strptime(moonset_UTC.iso , fmt2))

moonset_at_observatory = (
    moonset_at_observatory.astimezone(observatory_timezone).strftime(fmt3))

moon_phase = observer.moon_phase(Observation_Start)

moon_illumination = observer.moon_illumination(Observation_Start)

################################################################################

midnight_UTC = observer.midnight(Time(Observation_Start.astimezone(UTC)),
                                 which='next')
midnight_at_observatory = (
    dt.datetime.strptime(midnight_UTC.iso , fmt2))

midnight_at_observatory = (
    midnight_at_observatory.astimezone(observatory_timezone).strftime(fmt3))


altaz_moon_midnight = observer.moon_altaz(midnight_UTC)

################################################################################
######## Astronomical Twilight #################################################

twilight_evening_astronomical_UTC = observer.twilight_evening_astronomical(
                                Time(Observation_Start.astimezone(UTC)),
                                which='next')

try:
    twilight_evening_astronomical_observatory = (
        dt.datetime.strptime(twilight_evening_astronomical_UTC.iso , fmt2))

    twilight_evening_astronomical_observatory = (
        (twilight_evening_astronomical_observatory
        ).astimezone(observatory_timezone).strftime(fmt3))

except:
    twilight_evening_astronomical_observatory = "N/A"

##########

twilight_morning_astronomical_UTC = observer.twilight_morning_astronomical(
                                Time(Observation_Start.astimezone(UTC)),
                                which='next')

try:
    twilight_morning_astronomical_observatory = (
        dt.datetime.strptime(twilight_morning_astronomical_UTC.iso , fmt2))

    twilight_morning_astronomical_observatory = (
        (twilight_morning_astronomical_observatory
        ).astimezone(observatory_timezone).strftime(fmt3))

except:
    twilight_morning_astronomical_observatory = "N/A"

############################################################

# This code was written during the summer solstice in Dublin, so the
# sun never reached -18 deg. For this reason the script is written to
# try and calculate nautical twilight and Civil twilight also. This
# problem should not occur for the majority of the year in most locations.

# If a calculation is not possible, a warning will trigger but the
# scrip will continue to run

twilight_evening_nautical_UTC = observer.twilight_evening_nautical(
                                Time(Observation_Start.astimezone(UTC)),
                                which='next')

twilight_evening_nautical_observatory = (
    dt.datetime.strptime(twilight_evening_nautical_UTC.iso , fmt2))

twilight_evening_nautical_observatory = (
    (twilight_evening_nautical_observatory
    ).astimezone(observatory_timezone).strftime(fmt3))

##########

twilight_morning_nautical_UTC = observer.twilight_morning_nautical(
                                Time(Observation_Start.astimezone(UTC)),
                                which='next')

twilight_morning_nautical_observatory = (
    dt.datetime.strptime(twilight_morning_nautical_UTC.iso , fmt2))

twilight_morning_nautical_observatory = (
    (twilight_morning_nautical_observatory
    ).astimezone(observatory_timezone).strftime(fmt3))

##############################################################

twilight_evening_civil_UTC = observer.twilight_evening_civil(
                                Time(Observation_Start.astimezone(UTC)),
                                which='next')

twilight_evening_civil_observatory = (
    dt.datetime.strptime(twilight_evening_civil_UTC.iso , fmt2))

twilight_evening_civil_observatory = (
    (twilight_evening_civil_observatory
    ).astimezone(observatory_timezone).strftime(fmt3))

##########

twilight_morning_civil_UTC = observer.twilight_morning_civil(
                                Time(Observation_Start.astimezone(UTC)),
                                which='next')

twilight_morning_civil_observatory = (
    dt.datetime.strptime(twilight_morning_civil_UTC.iso , fmt2))

twilight_morning_civil_observatory = (
    (twilight_morning_civil_observatory
    ).astimezone(observatory_timezone).strftime(fmt3))

################################################################################

# for some reason, the moon phase returns an angle in radians, with
# zero corresponding to a full moon and pi radians corresponding
# to a new moon, hence the formula below so that the program
# displays a full moon as 1 and a new moon as 0
print("Moon Phase = " , "%.3f" %(1 - (moon_phase / u.rad) / np.pi))
print("Moon Illumination = " , "%.3f" %moon_illumination)
print("Midnight = " , midnight_UTC.iso , "UTC Time")

# moon altitude and azimuth
print("Moon information at midnight ",
      "Altitude = ",
      "%.3f" %((altaz_moon_midnight).alt /u.deg) *u.deg,
      "Azimuth = ",
      "%.3f" %((altaz_moon_midnight).az /u.deg) *u.deg)

altaz_moon_now = observer.moon_altaz(current_time)
print("Moon information now: ",
      "Altitude = ",
      "%.3f" %((altaz_moon_now).alt /u.deg) *u.deg,
      "Azimuth = ",
      "%.3f" %((altaz_moon_now).az /u.deg) *u.deg)

events = [('Alt/Az Now' , ("Alt = ",
                       "%.3f" %((altaz_moon_now).alt /u.deg) *u.deg,
                       "Az = ",
                       "%.3f" %((altaz_moon_now).az /u.deg) *u.deg)),
          ('Alt/Az MN', ("Alt = ",
                    "%.3f" %((altaz_moon_midnight).alt /u.deg) *u.deg,
                    "Az = ",
                    "%.3f" %((altaz_moon_midnight).az /u.deg) *u.deg )),
          ("Moon Phase = " , "%.3f" %(1 - (moon_phase / u.rad) / np.pi)),
          ("Illumination = " , "%.3f" %moon_illumination)]
t = Table(rows = events, names=('Moon Info' , 'Information'))
print(t)


# astroplan takes Astronomical Twilight to be at -18 degrees

# I think that astroplan is calculating sunrise as Naughtical Twilight
# If this is the case, then sunset, moonrise and moonset might not
# be accurate to actual rise and set times


events = [('Sunrise' , sunrise_at_observatory , sunrise_UTC.iso),
          ('Sunset' , sunset_at_observatory , sunset_UTC.iso),
          ('Moonrise' , moonrise_at_observatory , moonrise_UTC.iso),
          ('Moonset' , moonset_at_observatory , moonset_UTC.iso),
          ('Evening Astronomical Twilight',
          twilight_evening_astronomical_observatory,
          twilight_evening_astronomical_UTC.iso),
          ('Morning Astronomical Twilight',
          twilight_morning_astronomical_observatory,
          twilight_morning_astronomical_UTC.iso),
          ('Evening Nautical Twilight',
          twilight_evening_nautical_observatory,
          twilight_evening_nautical_UTC.iso),
          ('Morning Nautical Twilight',
          twilight_morning_nautical_observatory,
          twilight_morning_nautical_UTC.iso),
          ('Evening Civil Twilight',
          twilight_evening_civil_observatory,
          twilight_evening_civil_UTC.iso),
          ('Morning Civil Twilight',
          twilight_morning_civil_observatory,
          twilight_morning_civil_UTC.iso)]
t = Table(rows = events, names=('Event' , 'Observatory Time' , 'UTC Time'))
print(t)


################################################################################
##### Target ###################################################################

##### Returns variable "target" for a single target #####
##### Returns variable "targets" for a list of targets #####


### tries to read argument as list of targets in a .txt file ###
### if that fails, tries to read argument as single target #####
### if both fail, prints "No valid target given" ###############


try:
    try:
        target_table = ascii.read(args.target[0])
        targets = [FixedTarget(coord = SkyCoord(ra=ra*u.deg,
                                                dec=dec*u.deg),
                                                name=name)
                                            for name , ra , dec in target_table]
        print(targets)
    except:
        target_table = ascii.read(args.target[0])
        targets = [FixedTarget.from_name(list(target_table[i])[0])
                                     for i in range(np.size(target_table))]
        print(targets)
except:
    if np.size(args.target) == 4:   # In case somebody enters a two word Name
                                    # like Crab Nebula and also inputs
                                    # coordinates
        name = (args.target[0] , args.target[1])
        name = ' '.join(str(i) for i in name)
        coord = SkyCoord(ra = float(args.target[2])*u.deg,
        dec = float(args.target[3])*u.deg)
        target = FixedTarget(coord = coord , name = name)
        print(target)
    elif np.size(args.target) == 3:   # runs if name and coordinates are given
        coord = SkyCoord(ra = float(args.target[1])*u.deg,
        dec = float(args.target[2])*u.deg)
        target = FixedTarget(coord = coord , name = args.target[0])
        print(target)

    elif np.size(args.target) == 2: # runs if two target arguments are given
                                    # checks if the given arguments are float
                                    # or string in case an object name consists
                                    # of two words eg. Crab Nebula so not to
                                    # confuse two strings with two floats
        try:
            target=FixedTarget.from_name(' '.join(str(i) for i in args.target))
            print(target)
        except:
            coord = SkyCoord(ra = float(args.target[0])*u.deg,
            dec = float(args.target[1])*u.deg)
            target = FixedTarget(coord = coord , name = "Target Object")
            print(target)

    else:   # runs if a single argument is given
        try:
            target = FixedTarget.from_name(args.target[0])
            print(target)
        except:
            print("No valid target given")


################################################################################
######## Target rise and set time/times ########################################

# This part of the script reads the targets given and checks their rise times.
# The script has been written so that it should be able to do the calculations
# using the name of each target. For a single target the script can do the
# calculations even if the name consists of more than one argument, such
# as "Crab Nebula", but if the argument is a text file with names, the script
# cannot yet read the names of targets whose name have more than one argument

#print(target_table)

try:
    print(np.size(targets))

    for i in range(np.size(targets)):

        target_rise_times = observer.target_rise_time(Observation_Start,
                                                      targets[i],
                                                      which="next")
        print(targets[i].name , "rise time = " , target_rise_times.iso)


except:
    try:
        target_rise_time = observer.target_rise_time(Observation_Start,
                                                     target,
                                                     which="next")
        print(target.name , "rise time = " , target_rise_time.iso)
    except:
        print("No targets given")


################################################################################ Have working code in a Jupyter Notebook which can calculate the angular
################################################################################ separation between any target and the moon




##### Moon Separation ##########################################################
################################################################################

start = Observation_Start.astimezone(UTC)
end = Observation_End.astimezone(UTC)

if args.precision == 1:
    time_window = start
else:
    time_window = start + (end - start) * np.linspace(0, 1, args.precision)

# for i in range(args.precision):
#     print(Time(time_window[i]))

moon_coord = coordinates.get_moon(Time(time_window) , observer.location)

# print("moon coord = " , np.size(moon_coord))
# print("precision = " , range(args.precision))

# moon_coord = SkyCoord(moon_coord.ra , moon_coord.dec , unit = "deg")
# target_coord = SkyCoord(targets[1].ra , targets[1].dec , unit = "deg")

# the try part will try for a list of targets
# the except runs for a single target since a single target
# is not a scriptable object

# print(np.size(targets))

# target_moon_separation will become a list, where each element is a list
# which describes the change in angular separation between a target and
# the moon over the whole time window
target_moon_separation = np.zeros(np.size(targets))

# the list separations is going to be used in the loop below to
# store angles of separation as they are calculated
separations = np.zeros(args.precision)
###########
# moon_coords = SkyCoord(moon_coord[0].ra , moon_coord[0].dec , unit = "deg")
# target_coord = SkyCoord(targets[1].ra , targets[1].dec , unit = "deg")
#
# sep = (target_coord.separation(moon_coords))
# print("sep = " , sep.deg)
###########

# For some reason SkyCoord will accept lists of coordinates but cannot be
# used in loops to do one calculation at a time, so here is a set of
# calculations done using lists put through SkyCoord()


moon_coords = SkyCoord(moon_coord.ra , moon_coord.dec , unit = "deg")
print(moon_coords)
# separations = target_coord.separation(moon_coord)
#
# print(separations)
target_coords = []
for i in range(np.size(targets)):
    target_coords = SkyCoord(targets[i].ra , targets[i].dec , unit = "deg")

# target_coords = SkyCoord(targets.ra , targets.dec , unit = "deg")
for i in range(np.size(targets)):
    target_moon_separation = target_coords.separation(moon_coords)

# separations = target_coords.separation(moon_coords)

# for i in range(np.size(targets)):
#     target_coords = SkyCoord(targets.ra , targets.dec , unit = "deg")
#
#     separations = target_coords.separation(moon_coords)


print(target_moon_separation)

################################################################################
################################################################################
